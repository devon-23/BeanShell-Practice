// You don't need to import the java.util.* package, or initialize it
	
	int a = 10;
	int b = 5;
	int sum = a + b;
	
	System.out.println("the sum of " + a + " and " + b + " is " + sum);
	if (a < b) {
		System.out.println(a + " is smaller than " + b);
	} else {
		System.out.println(b + " is smaller than " + a);
	}

	System.out.println("---------------------------------");
// Array List
	list = new ArrayList();
	
	list.add("one");
	list.add("two");
	list.add("three");
	
	System.out.println("first item: " + list.get(0));
	System.out.println(list.size());
	
	// Iterate over list
	for (item : list) {
		System.out.println("Array List Item - " + item);
	}
	
	list.remove(1);
	list.clear();

	System.out.println("---------------------------------");
// Maps
	map = new HashMap();
	map.put("key1", "value1");
	map.put("key2", "value2");
	
	// Iterate over map entries
	for (entry : map.entrySet()) {
		System.out.println("key - " + entry.getKey() + " value - " + entry.getValue());
	}
	
	map.remove("key1");
	map.clear();
	
	Map returnMap = new HashMap();
	returnMap.put("identityAttributeName", "empId");
	
	print(returnMap.get("identityAttributeName"));
	
	System.out.println("---------------------------------");
// Set
	set = new HashSet();
	set.add("Apple");
	set.add("Banana");
	set.add("Orange");
	
	System.out.println("Set size is " + set.size());
	
	for (item : set) {
		System.out.println("Set item: " + item);
	}
	
	set.remove("Apple");
	set.clear();
	
	System.out.println("---------------------------------");
	
// Array
	array = new int[5];
	
	for (var i = 0; i < array.length; i++) {
		array[i] = i + 1;
	} 
	
	System.out.println("Array Element at index 2 is " + array[2]);
	System.out.println("Array size is " + array.length);
	array[2] = 35;
	
	for (int i = 0; i < array.length; i++) {
		System.out.println("Array Element at index " + i + " is " + array[i]);
	}
	
	System.out.println("---------------------------------");
	
// Hashtable
	hashtable = new Hashtable();
	date = new Date();
	hashtable.put( "today", date );
	
	// Print the current clock value
	print(System.currentTimeMillis());
	
	// Loop
	for (i=0; i<5; i++)
	    print(i);
	    
	System.out.println("---------------------------------");
	
// String manipulation
	String str1 = "Hello";
	String str2 = "World";
	
	String concat = str1 + " " + str2;
	System.out.println("Concatenated string: " + concat);
	System.out.println("The length is " + concat.length());
	
	String substr = concat.substring(6);
	System.out.println("Substring from index 6: " + substr);
	
	System.out.println("---------------------------------");

// Methods
	int divide(int a, int b) {
		try {
			return a / b;
		} catch (ArithmeticException e) {
			System.out.println("Arithmetic exception: Error");
			return -1;
		}
	}
	
	result = divide(10, 2);
	System.out.println("Result of division: " + result);
	
	second = divide(20, 0);
	System.out.println("Result of second division: " + second);
	
	System.out.println("---------------------------------");
	
// File I/O
	filePath = "src/output.txt";
	
	try {
		writer = new BufferedWriter(new FileWriter(filePath));
		writer.write("Hello World");
		writer.newLine();
		writer.write("This is a test file");
		writer.close();
		print("File written successfully");
	} catch (IOException e) {
		print("Error writing to file: " + e.getMessage());
	}
	
	try {
		reader = new BufferedReader(new FileReader(filePath));
		String line;
		
		while ((line = reader.readLine()) != null) {
			print("Read line: " + line);
		}
		reader.close();
	} catch (IOException e) {
		print("Error reading from file: " + e.getMessage());
	}
	
	System.out.println("---------------------------------");
	
// Logging
	//log.info("Starting rule...");
	//log.error("An error occurred - ");
	
/*
	SailPoint
	
	#Identity Object
	Identity idObj = context.getObjectByName(Identity.class, “HR App1”);
	Identity idObj = context.getObjectById(Identity.class, “0a0000057dae1f95817dae34a9d7001f”);
	return idObj.toXml();
	
	--------
	
	# Application Object
	import sailpoint.object.Application;
	Application appObj = context.getObjectByName(Application.class, “123456”);
	List schemaList = appObj.getSchemas(); //list of schema attributes in the app
	Application appObj = context.getObjectById(Application.class, “0a0000057dae1f95817dae3313520011”);
	
	--------
	
	# Link Object
	import sailpoint.object.Link;
	Link link = context.getObjectById(Link.class, "0a32423002sdfshdhkah");
	return link.toXML();
	
	--------
	
	# Set data to Identity Object
	import sailpoint.object.Identity
	
	Identity idObj = context.getObjectByName(Identity.class, "101010");
	String locationBefore = idObj.getAttribute("location");
	String departmentDBefore = idObj.getAttribute("department");
	
	String location = "USA";
	String department = "Modeling";
	
	idObj.setAttribute("location", location);
	idObj.setAttribute("department", department);
	
	context.saveObject(idObj); // Save object
	context.commitTransaction(); // Commit transaction to DB
*/
	
/* Notes

	IIQ is about Reading the data also called Aggregation or Get
		        Writing  the data also called Provisioning or Set
		        
	You can use getAttribute() method to extract any attribute by passing attribute name
	
	# Object API
	Return Type		Method 		Name			Description
	Application		getApplication()			Application where the account resides.
	String			getApplicationId()			Gets the id of the application referenced by this link.
	String			getApplicationName()		Gets the name of the application referenced by this link.
	String			getAttribute(attributeName)	Gets a specific attribute value from the Link
	Attributes		getAttributes()				Gets all the attributes associated with the Link
	Identity		getIdentity()				Gets owning Identity
	boolean			getIiqDisabled() 			True if link is disabled
	boolean			getIiqLocked() 				true if link is locked
	String			getNativeIdentity()			The "raw" account identity.
	boolean			isDisabled() 				True if link is disabled
	boolean			isLocked() 					true if link is locked
	boolean			isManuallyCorrelated()		Flag to indicate account was manually correlated in the UI and the identity association should be left as is.
	void			setAttribute(name, value)	Sets an attribute to the link
	void			setIiqDisabled() 			Sets link as disabled status
	void			setIiqLocked() 				sets link as locked status
	void			setManuallyCorrelated(boolean manual) 	
	void			setNativeIdentity(String id) 	
	

*/
